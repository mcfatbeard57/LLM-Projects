Here's the code improved with the suggested techniques and designed for easier configuration:

```python
import torch
import torchaudio
import argparse

def preprocess_audio(audio_path, sr, noise_reduction="spectral_subtraction", vad_threshold=0.01):
  """
  Preprocesses audio data using configurable techniques.

  Args:
      audio_path: Path to the audio file.
      sr: Sample rate of the audio data.
      noise_reduction (str, optional): Technique for noise reduction. Defaults to "spectral_subtraction".
      vad_threshold (float, optional): Threshold for voice activity detection. Defaults to 0.01.

  Returns:
      A preprocessed audio waveform as a PyTorch tensor.
  """
  # Load audio as tensor
  waveform, _ = torchaudio.load(audio_path)

  # Mel Spectrogram generation
  transform = torchaudio.transforms.MelSpectrogram(sample_rate=sr, n_fft=1024, hop_length=512, n_mels=128)
  spectrogram = transform(waveform)

  # Noise Reduction
  if noise_reduction == "spectral_subtraction":
    # Estimate noise using first few frames (assuming silence at the beginning)
    noise_estimate = torch.mean(spectrogram[:, :10], dim=1).unsqueeze(1)
    clean_spectrogram = spectrogram - noise_estimate
  elif noise_reduction == "none":
    clean_spectrogram = spectrogram
  else:
    raise ValueError(f"Invalid noise_reduction option: {noise_reduction}")
  clean_spectrogram = torch.clamp(clean_spectrogram, min=0.0)  # Avoid negative values

  # Voice activity detection
  vad_mask = torch.abs(clean_spectrogram) > vad_threshold

  # Return preprocessed spectrogram
  return clean_spectrogram * vad_mask

# Parse arguments
parser = argparse.ArgumentParser(description="Audio Preprocessing")
parser.add_argument("audio_path", type=str, help="Path to the audio file")
parser.add_argument("--sr", type=int, default=16000, help="Sample rate of the audio data")
parser.add_argument("--noise_reduction", type=str, default="spectral_subtraction", choices=["spectral_subtraction", "none"], help="Technique for noise reduction")
parser.add_argument("--vad_threshold", type=float, default=0.01, help="Threshold for voice activity detection")
args = parser.parse_args()

# Preprocess audio
preprocessed_spec = preprocess_audio(args.audio_path, args.sr, args.noise_reduction, args.vad_threshold)

# Further processing or feed into your speech recognition model
```

